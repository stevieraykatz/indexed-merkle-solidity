// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.23;

import {Test, console, console2} from "forge-std/Test.sol";
import {IndexedMerkleTree} from "../src/IndexedMerkleTree.sol";

contract IndexedMerkleTreeTest is Test {

    function test_verify() public {
        (bytes32 root) = _goGetTree();
        console2.logBytes32(root);
        IndexedMerkleTree.Proof memory proof = _goGetIncProof();
        assert(IndexedMerkleTree.verify(proof));
    }

    function _goGetTree() internal returns (bytes32) {
        string[] memory inputs = new string[](2);
        inputs[0] = "test/../go/imt";
        inputs[1] = "getTreeRoot";
        return abi.decode(vm.ffi(inputs), (bytes32));
    }


    function _goGetIncProof() internal returns (IndexedMerkleTree.Proof memory) {
        string[] memory inputs = new string[](3);
        inputs[0] = "test/../go/imt";
        inputs[1] = "getInclusionProof";
        inputs[2] = "123";
        return abi.decode(vm.ffi(inputs), (IndexedMerkleTree.Proof));
    }
}
    // function test_showEncodedBytes() public pure {
    //     IndexedMerkleTree.Node memory node = IndexedMerkleTree.Node({
    //             key: 123,
    //             value: 456,
    //             nextKey: 0
    //         });
    //     uint256[] memory siblings = new uint256[](4);
    //     siblings[3] = uint256(0x221dcee6bdf5f226522190f760a72c612ce28194fed6177cfc0d062437a3d724);
    //     IndexedMerkleTree.Proof memory proof = IndexedMerkleTree.Proof({
    //         root: bytes32(0x1a6ced1c9ad021d5b07374514687029a8459706c96710b03132fcc06ed66d680),
    //         size: 1,
    //         index: 1,
    //         node: node,
    //         siblings: siblings
    //     });
    //     bytes memory soldata = abi.encode(proof);
    //     console2.logBytes(soldata);
    //     bytes memory godata = hex"1a6ced1c9ad021d5b07374514687029a8459706c96710b03132fcc06ed66d68000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000001c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000221dcee6bdf5f226522190f760a72c612ce28194fed6177cfc0d062437a3d724";
    //     console2.logBytes(godata);
    //     abi.decode(godata, (IndexedMerkleTree));
    // }

// go:  0x00000000000000000000000000000000000000000000000000000000000000201a6ced1c9ad021d5b07374514687029a8459706c96710b03132fcc06ed66d68000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000001c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000221dcee6bdf5f226522190f760a72c612ce28194fed6177cfc0d062437a3d724
// sol: 0x1a6ced1c9ad021d5b07374514687029a8459706c96710b03132fcc06ed66d68000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000001c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000221dcee6bdf5f226522190f760a72c612ce28194fed6177cfc0d062437a3d724